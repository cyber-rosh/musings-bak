I"Ó<p>Let us take a use case in which a small to medium sized enterprise wants to scale up the security infrastructure of their internet facing website. They have this conventional architecture in which the website is hosted on Virtual Private Server (VPS). What can be done immediately, for upgrading the security posture of the hosted website, without actually going into the codebase or the workflow of the website itself.</p>
<blockquote>
  <p>The first step which comes directly to mind is to minimise the attack surface of our infrastructure which includes the website itself and the hosted environment and then to stop the malicious requests hitting the APIs.</p>
</blockquote>

<p>Now, as we have worked out our design goals, how we go about reworking the architecture and achieving the design goals. Of course there are many ways, but one of the ways is to introduce the undermentioned artifacts.</p>

<ul>
  <li>Firewall</li>
  <li>Proxy</li>
  <li>Web Application Firewall</li>
</ul>

<p><img src="../assets/images/2021-05-22-fig1.png" alt="Deployment Architecture of Application" /></p>

<p>The firewall at the ingress of the Virtual Private Server (VPS), will ensure that only https traffic is allowed for our proxy inside VPS. We can also have settings in which the proxy is accessible from specific IP/subnet, we can have settings as follows for <code class="language-plaintext highlighter-rouge">firewalld</code> in CentOS7:</p>

<p>Firewalld Rules</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Create a trusted Zone having specific IP</span>
firewall-cmd <span class="nt">--permanent</span> <span class="nt">--add-source</span><span class="o">=</span>10.10.10.10 <span class="nt">--zone</span><span class="o">=</span>trusted &amp;
<span class="c"># Add service http and https to the trusted zone</span>
firewall-cmd <span class="nt">--permanent</span> <span class="nt">--add-service</span><span class="o">=</span>http <span class="nt">--zone</span><span class="o">=</span>trusted &amp;
firewall-cmd <span class="nt">--permanent</span> <span class="nt">--add-service</span><span class="o">=</span>https <span class="nt">--zone</span><span class="o">=</span>trusted &amp;
<span class="c"># Remove service http and https from the public zone</span>
firewall-cmd <span class="nt">--permanent</span> <span class="nt">--remove-service</span><span class="o">=</span>http <span class="nt">--zone</span><span class="o">=</span>public &amp;
firewall-cmd <span class="nt">--permanent</span> <span class="nt">--remove-service</span><span class="o">=</span>https <span class="nt">--zone</span><span class="o">=</span>public &amp;
firewall-cmd <span class="nt">--reload</span>
</code></pre></div></div>

<p>The proxy will ensure that our website is not directly exposed to the outside world and has additional benefits of load balancing. We can setup Access Control Lists (ACLs) so that only specific endpoints of our website APIS are accessible from outside. Some of the sample configuration settings for the HAproxy could be as follows:</p>

<p>HAProxy Config Rules</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>frontend httpsandhttp
        <span class="nb">bind</span> <span class="k">*</span>:80
        <span class="nb">bind</span> <span class="k">*</span>:443 ssl crt /etc/ssl/haproxy.pem
        <span class="c"># Redirect traffic to https        </span>
        http-request redirect scheme https unless <span class="o">{</span> ssl_fc <span class="o">}</span>
        mode http
        acl app1 path_end <span class="nt">-i</span> /app1
        acl app2 path_end <span class="nt">-i</span> /app2    	
    	use_backend app1Servers <span class="k">if </span>app1 
    	use_backend app2Servers <span class="k">if </span>app2

backend app1Servers
        balance roundrobin        
        mode http
        server webserver1 127.0.0.1:2222 check weight 1 maxconn 50 ssl verify none
        
backend app2Servers
        balance roundrobin        
        mode http
        server webserver2 127.0.0.1:3333 check weight 1 maxconn 50 ssl verify none
</code></pre></div></div>

<p>The traffic from our proxy now goes through the Web Application Firewall. This is configured to thwart common web application vulnerabilities. We could use the open source WAF like <strong><em>modsecurity</em></strong> or vendor dependent one. The WAFs also have the settings to configure it as proxy for sending the actual website traffic. We can run everything in a containerised environment using docker or Kubernetes.</p>

<h4 id="reference">Reference</h4>
<ul>
  <li>https://www.youtube.com/watch?v=qYnA2DFEELw</li>
  <li>https://www.haproxy.com/blog/redirect-http-to-https-with-haproxy/</li>
</ul>

:ET