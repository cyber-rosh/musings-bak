I"<p>Let us take a case of a mid sized company which wants to scale up its security architecture for itâ€™s client facing website. As per the terms of reference, there should be minimum disruption in the existing workflow and any kind of code rewrite is not on the platter. They have a classic deployment in which the website is hosted on Virtual Private Servers (VPSs).</p>

<blockquote>
  <p>We can have a two pronged strategy here, first to minimize the attack surface and then to monitor the traffic that is allowed to come in. This can be done by limiting access to hosted infrastructure (VPS) by dropping all the traffic at ingress except that for <code class="language-plaintext highlighter-rouge">https</code> or port <code class="language-plaintext highlighter-rouge">443</code>. We also need to limit the access to web APIs in such a way that, the internal APIs are not exposed to outside world and all incoming traffic on the exposed public APIs is being monitored.</p>
</blockquote>

<p>Now, having worked out the design goals, we can rework the architecture of our deployment. Of course there are many ways to go about the security architecture, but one of the ways is to enable/introduce following artifacts.</p>

<ul>
  <li>Infrastructure Firewall</li>
  <li>Proxy / Load balancer</li>
  <li>Web Application Firewall</li>
</ul>

<p><img src="/musings/assets/images/2021-05-22-web-apps-fig-1.png" alt="Deployment Architecture of Application" class="align-center" /></p>

<h2 id="infrastructure-firewall">Infrastructure Firewall</h2>
<p>The infrastructure firewall will drop all traffic at ingress of our VPS except that meant for <code class="language-plaintext highlighter-rouge">https</code> and <code class="language-plaintext highlighter-rouge">http</code>. We can also configure the firewall to limit the traffic from specific IPs/subnets. Some of the sample rules in our <code class="language-plaintext highlighter-rouge">firewalld</code> of CentOS7 as given here:</p>

<p>Firewalld Rules</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Step 1: Create a trusted Zone having whitelisted IP / subnet.</span>
firewall-cmd <span class="nt">--permanent</span> <span class="nt">--add-source</span><span class="o">=</span>10.10.10.10 <span class="nt">--zone</span><span class="o">=</span>trusted &amp;

<span class="c"># Step 2: Add service http and https to the trusted zone</span>
firewall-cmd <span class="nt">--permanent</span> <span class="nt">--add-service</span><span class="o">=</span>http <span class="nt">--zone</span><span class="o">=</span>trusted &amp;
firewall-cmd <span class="nt">--permanent</span> <span class="nt">--add-service</span><span class="o">=</span>https <span class="nt">--zone</span><span class="o">=</span>trusted &amp;

<span class="c"># Step 3: Remove service http and https from the public zone</span>
firewall-cmd <span class="nt">--permanent</span> <span class="nt">--remove-service</span><span class="o">=</span>http <span class="nt">--zone</span><span class="o">=</span>public &amp;
firewall-cmd <span class="nt">--permanent</span> <span class="nt">--remove-service</span><span class="o">=</span>https <span class="nt">--zone</span><span class="o">=</span>public &amp;
firewall-cmd <span class="nt">--reload</span>
</code></pre></div></div>

<h2 id="proxy--load-balancer">Proxy / Load balancer</h2>
<p>The proxy will ensure that our website is not directly exposed to the outside world and has additional benefits of load balancing. We can setup Access Control Lists (ACLs) so that only specific endpoints of our website APIs are accessible from outside. This will also safeguard any accidental exposure of our internal APIs. Some of the sample configuration settings for the <em>HAproxy</em> could be as follows:</p>

<p>HAProxy Config Rules</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>frontend httpsandhttp
        <span class="nb">bind</span> <span class="k">*</span>:80
        <span class="nb">bind</span> <span class="k">*</span>:443 ssl crt /etc/ssl/haproxy.pem
        <span class="c"># Redirect traffic to https        </span>
        http-request redirect scheme https unless <span class="o">{</span> ssl_fc <span class="o">}</span>
        mode http
        acl app1 path_end <span class="nt">-i</span> /app1
        acl app2 path_end <span class="nt">-i</span> /app2    	
    	use_backend app1Servers <span class="k">if </span>app1 
    	use_backend app2Servers <span class="k">if </span>app2

backend app1Servers
        balance roundrobin        
        mode http
        server webserver1 127.0.0.1:2222 check weight 1 maxconn 50 ssl verify none
        
backend app2Servers
        balance roundrobin        
        mode http
        server webserver2 127.0.0.1:3333 check weight 1 maxconn 50 ssl verify none
</code></pre></div></div>
<h2 id="web-application-firewall">Web Application Firewall</h2>
<p>The traffic from our proxy now goes through the Web Application Firewall. This is configured to thwart common web application vulnerabilities. We could use the open source WAF like <strong><em>modsecurity</em></strong> or vendor dependent one. The WAFs also have the settings to configure it as proxy for sending the actual website traffic. Thus both proxy and WAF can be bundled in one software. We can run everything in a containerised environment using docker or Kubernetes.</p>

<h4 id="reference">Reference</h4>
<ul>
  <li>https://www.youtube.com/watch?v=qYnA2DFEELw</li>
  <li>https://www.haproxy.com/blog/redirect-http-to-https-with-haproxy/</li>
</ul>

:ET